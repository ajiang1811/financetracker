export type StringOrNumber = string | number;
export type StringOrNumberOrBoolean = StringOrNumber | boolean;
export type FilterOperators = 'and' | 'or';
export type AvailableSlots = 'category' | 'x-axis' | 'y-axis' | 'dimension' | 'slidermetric' | 'time' | 'levels' | 'geo' | 'coordinates';
export type ParametersInput = (StringOrNumber | StringOrNumber[])[];
export type FilterIn = {
    expression?: FilterExpression;
    parameters?: [
        {
            slot?: AvailableSlots;
            level?: number;
            decimals?: number;
        },
        ParametersInput
    ];
    properties?: Record<string, string | number | unknown>;
};
export type FilterExpression = '? = ?' | '? != ?' | '? in ?' | '? not in ?' | '? like ?' | '? not like ?' | '? starts with ?' | '? not starts with ?' | '? ends with ?' | '? not ends with ?' | '? < ?' | '? <= ?' | '? > ?' | '? >= ?' | '? between ?' | 'last_now' | 'to_date' | 'last_available' | 'last_completed' | 'next_now' | 'next_full' | 'WTD' | 'MTD' | 'QTD' | 'YTD' | '? is null' | '? is not null';
export type FilterOrigin = 'filterFromVizItem' | 'filterFromFilterItem' | 'itemFilter' | 'global';
export type Filter = {
    fromAuthorization?: boolean;
    expression?: FilterExpression;
    parameters?: [
        {
            columnId?: string;
            datasetId?: string;
            /** @deprecated Will be removed in next major release. Use 'columnId' instead */
            column_id?: string;
            /** @deprecated Will be removed in next major release. Use 'datasetId' instead */
            dataset_id?: string;
            level?: number;
            lowestLevel?: number;
        } & Record<string, StringOrNumberOrBoolean | StringOrNumberOrBoolean[]>,
        (StringOrNumber | StringOrNumber[])[]
    ];
    properties?: {
        id?: string;
        ignore?: string[];
        itemId?: string;
        /** @deprecated Will be removed in next major release. Use 'itemId' instead */
        viz?: string;
        origin?: FilterOrigin;
        type?: 'where' | 'having';
    };
};
export type FilterGroup = {
    id: string;
    condition: FilterOperators;
    filters: Filter[];
    subGroups: FilterGroup[];
    origin: FilterOrigin;
    datasetId?: string;
    itemId?: string;
};
export type FilterInput = Partial<Record<FilterOperators, (FilterIn | FilterInput)[]>>;
