import { ExportType } from '../methods/export-dashboard';
import { AccessibleDashboard, BrowserCheckKey, DashboardContentParams, DashboardDimensions, DashboardEditMode, DashboardInputs, DashboardPromises, ExportDashboard, ItemData, ScreenMode, SetEditMode, SetFilters, SetPreview, AddFilters } from './common.model';
import { IframeStyles } from './styles.model';
import { FilterGroup } from './filters.model';
import { CombinedFilterInput } from './viz-items';
export interface CommonLuzmoDashboard extends DashboardInputs {
    VERSION?: string;
    promises?: DashboardPromises;
    params?: DashboardContentParams;
    iframeLoaded?: boolean;
    loaderSize?: number;
    borderWidth?: number;
    minHeight?: number;
    iframeWidth?: string;
    iframeHeight?: string;
    error?: boolean;
    browserNotSupported?: BrowserCheckKey[];
    dimensions?: DashboardDimensions;
    currentScreenMode?: ScreenMode;
    iframeStyle?: IframeStyles;
    currentAuthKey?: string;
    currentAuthToken?: string;
}
export interface NgxLuzmoDashboard extends CommonLuzmoDashboard {
    dashboardReference?: HTMLElement;
}
export interface ES6LuzmoDashboard extends CommonLuzmoDashboard {
}
export interface VueLuzmoDashboard extends CommonLuzmoDashboard {
}
export type LuzmoDashboard = NgxLuzmoDashboard | ES6LuzmoDashboard | VueLuzmoDashboard;
export interface LuzmoElement extends HTMLElement {
    getDashboards(): Promise<LuzmoDashboard[]>;
    getFilters(): Promise<FilterGroup[]>;
    exportDashboard(format?: ExportType): Promise<ExportDashboard>;
    reloadDashboard(): Promise<void>;
    getData(itemId: string): Promise<ItemData>;
    refreshData(itemId?: string): Promise<void>;
    getAccessibleDashboards(): Promise<AccessibleDashboard[]>;
    setAuthorization(key: string, token: string): Promise<void>;
    setEditMode(editMode: DashboardEditMode): Promise<SetEditMode>;
    setPreview(preview: boolean): Promise<SetPreview>;
    setFilters<K extends CombinedFilterInput>(itemId: string, filters: K): Promise<SetFilters>;
    addFilters(itemId: string, filters: FilterGroup[]): Promise<AddFilters>;
}
