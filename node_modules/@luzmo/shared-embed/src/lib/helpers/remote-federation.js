export const remotesMap = {
// "remote_app": { url: "http://localhost:4201/remoteEntry.mjs", format: "esm", from: "vite" },
};
const loadJS = async (url, fn) => {
    const resolvedUrl = typeof url === 'function' ? await url() : url;
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.addEventListener('load', fn);
    script.src = resolvedUrl;
    document.querySelectorAll('head')[0].append(script);
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const wrapShareModule = (remoteFrom) => ({});
async function __federationMethodEnsure(remoteId) {
    const remote = remotesMap[remoteId];
    if (remote.inited) {
        return remote.lib;
    }
    if (remote.format === 'var') {
        return new Promise((resolve) => {
            const callback = () => {
                if (!remote.inited) {
                    remote.lib = window[remoteId];
                    remote.lib.init(wrapShareModule(remote.from));
                    remote.inited = true;
                }
                resolve(remote.lib);
            };
            return loadJS(remote.url, callback);
        });
    }
    else if (['esm', 'systemjs'].includes(remote.format)) {
        return new Promise((resolve, reject) => {
            const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
            getUrl().then((url) => {
                import(
                /* @vite-ignore */ /* webpackIgnore: true */
                url).then((lib) => {
                    if (!remote.inited) {
                        const shareScope = wrapShareModule(remote.from);
                        lib.init(shareScope);
                        remote.lib = lib;
                        remote.lib.init(shareScope);
                        remote.inited = true;
                    }
                    resolve(remote.lib);
                }).catch(reject);
            });
        });
    }
}
export function __federationMethodWrapDefault(module, need) {
    if (!(module == null ? void 0 : module.default) && need) {
        const obj = /* @__PURE__ */ Object.create(null);
        obj.default = module;
        obj.__esModule = true;
        return obj;
    }
    return module;
}
export async function __federationMethodGetRemote(remoteName, componentName) {
    return __federationMethodEnsure(remoteName).then((remote) => remote.get(componentName).then((factory) => factory()));
}
